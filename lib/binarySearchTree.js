// Generated by CoffeeScript 1.9.2
var BinarySearchTree;

BinarySearchTree = (function() {
  function BinarySearchTree(root) {
    this.root = root;
  }

  BinarySearchTree.prototype.insert = function(val) {
    var current, node, results;
    node = {
      val: val,
      left: null,
      right: null
    };
    if (this.root) {
      current = this.root;
      results = [];
      while (!(current.left === node || current.right === node)) {
        if (val === current.val) {
          break;
        } else if (val < current.val) {
          if (current.left === null) {
            results.push(current.left = node);
          } else {
            results.push(current = current.left);
          }
        } else {
          if (current.right === null) {
            results.push(current.right = node);
          } else {
            results.push(current = current.right);
          }
        }
      }
      return results;
    } else {
      return this.root = node;
    }
  };

  BinarySearchTree.prototype.contains = function(val) {
    var contain, node, traverse;
    node = this.root;
    contain = false;
    traverse = function(node, val) {
      var current;
      current = node;
      if (current.val === val) {
        return contain = true;
      } else {
        if (current.left !== null) {
          traverse(current.left, val);
        }
        if (current.right !== null) {
          traverse(current.right, val);
        }
        return contain;
      }
    };
    return traverse(node, val);
  };

  BinarySearchTree.prototype.size = function() {};

  BinarySearchTree.prototype.depth = function() {};

  BinarySearchTree.prototype.balance = function() {};

  return BinarySearchTree;

})();

module.exports = BinarySearchTree;
